<!--
     General purpose build script for web applications and web services,
     including enhanced support for deploying directly to a Tomcat 5
     based server.

     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web applicaiton.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.

     $Id: build.xml.txt 565211 2007-08-13 00:09:38Z markt $
-->


<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="Gote Farm" default="compile" basedir=".">



<!-- ===================== Property Definitions =========================== -->


<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>


<!-- ==================== File and Directory Names ======================== -->


<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  build.home           The directory into which the "compile" target will
                       generate its output.

-->

  <property name="build.home"    value="${basedir}/war/WEB-INF/classes"/>
  <property name="src.home"      value="${basedir}/src/main"/>
  <property name="lib.home"      value="${basedir}/lib"/>


<!-- ================== Custom Ant Task Definitions ======================= -->

  <path id="scala.classpath">
    <pathelement location="${scala-compiler.jar}"/>
    <pathelement location="${scala-library.jar}"/>
    <pathelement location="${derby.jar}"/>
  </path>

  <path id="project.class.path">
    <path refid="scala.classpath"/>

    <pathelement location="war/WEB-INF/classes"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <taskdef resource="scala/tools/ant/antlib.xml">
    <classpath refid="scala.classpath"/>
  </taskdef>


<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>



<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 5
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar"
           value="/path/to/foo.jar"/>
-->


<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="war/${gwt-output.dir}"/>
    <delete dir="war/WEB-INF/lib"/>
  </target>


<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

    <target name="libs" description="Copy libs to WEB-INF/lib">
        <mkdir dir="war/WEB-INF/lib" />
        <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
        <!-- Add any additional server libs that need to be copied -->
        <copy todir="war/WEB-INF/lib">
            <fileset dir="${lib.home}" />
        </copy>
    </target>

    <target name="compile_java" depends="libs"
            description="Compile Java sources">
        <!-- Compile Java classes as necessary -->
        <mkdir    dir="${build.home}"/>
        <javac srcdir="${src.home}"
               destdir="${build.home}"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="compile_scala" depends="compile_java"
    description="Compile Scala sources">
        <!-- Compile Java classes as necessary -->
        <scalac
            srcdir="${src.home}"
            destdir="${build.home}"
            force="changed"
            deprecation="yes">
            <classpath refid="project.class.path"/>
            <include name="**/*.scala"/>
        </scalac>
    </target>

    <target name="compile" depends="compile_java,compile_scala"
            description="Compile Java and Scala sources">
        <!-- Copy application resources -->
        <copy todir="${build.home}">
            <fileset dir="${src.home}" excludes="**/*.java **/*.scala"/>
        </copy>
    </target>


    <target name="gwtc" depends="compile" description="GWT compile to JavaScript">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
        <classpath>
            <pathelement location="${src.home}"/>
            <path refid="project.class.path"/>
        </classpath>
        <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="-XstartOnFirstThread"/>
        <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
        <arg value="${gwt-xml-ep.name}"/>
        </java>
    </target>

    <target name="hosted" depends="compile" description="Run hosted mode">
        <java failonerror="true" fork="true"
              classname="com.google.gwt.dev.HostedMode">
        <classpath>
            <pathelement location="${src.home}"/>
            <path refid="project.class.path"/>
        </classpath>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="-XstartOnFirstThread"/>
        <arg value="-startupUrl"/>
        <arg value="GoteFarm.html"/>
        <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
        <arg value="${gwt-xml-ep.name}"/>
        </java>
    </target>

    <target name="build" depends="gwtc" description="Build this project" />

<!-- ==================== war Target ================================== -->

    <target name="war" depends="build">
        <zip destfile="gotefarm.war" basedir="war"/>
    </target>

    <target name="deploy" depends="war">
        <copy todir="${catalina.home}/webapps/" file="gotefarm.war"/>
    </target>

</project>
